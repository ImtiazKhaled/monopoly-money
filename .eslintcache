[{"C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\app.js":"1","C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\container.js":"2","C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\add_player.js":"3","C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\reportWebVitals.js":"4","C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\transfer_form.js":"5","C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\transfer_money.js":"6","C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\player_form.js":"7","C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\App.js":"8"},{"size":151,"mtime":1611128850656,"results":"9","hashOfConfig":"10"},{"size":10455,"mtime":1611894193569,"results":"11","hashOfConfig":"10"},{"size":1073,"mtime":1611893971510,"results":"12","hashOfConfig":"10"},{"size":362,"mtime":1611128422110,"results":"13","hashOfConfig":"10"},{"size":1969,"mtime":1611280957315,"results":"14","hashOfConfig":"10"},{"size":959,"mtime":1611281029830,"results":"15","hashOfConfig":"10"},{"size":1206,"mtime":1611891593688,"results":"16","hashOfConfig":"10"},{"size":151,"mtime":1611468546016,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1njj1c2",{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\app.js",[],["40","41"],"C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\container.js",["42","43","44"],"import React from \"react\";\r\nimport { Table, Space, Button, List, Input, Popover, Row, Col } from \"antd\";\r\nimport AddPlayer from \"./add_player\";\r\nimport GetMoney from \"./transfer_money\";\r\nimport Moment from 'moment';\r\n\r\nconst clirules = (\r\n  <div>\r\n    <p>$$$ from p1 to p2,p3,p4 [for reason]</p>\r\n    <p>$$$ to p1,p2,p3 from p4 [for reason]</p>\r\n    <p>p1 pass</p>\r\n    <p>p1 land</p>\r\n    <p>p1 park</p>\r\n  </div>\r\n);\r\n\r\nconst Container = () => {\r\n  const [players, setPlayers] = React.useState([]);\r\n  const [notifications, setNotifications] = React.useState([]);\r\n  const [inputVal, setInputVal] = React.useState(\"\");\r\n\r\n  React.useEffect(() => {\r\n    const test_players = JSON.parse(localStorage.getItem(\"players\"))\r\n      ? JSON.parse(localStorage.getItem(\"players\"))\r\n      : [\r\n          {\r\n            key: 1,\r\n            name: \"Bank\",\r\n            money: 100000,\r\n          },\r\n          {\r\n            key: 2,\r\n            name: \"Free Parking\",\r\n            money: 0,\r\n          },\r\n        ];\r\n    const test_notifications = JSON.parse(localStorage.getItem(\"notifications\"))\r\n      ? JSON.parse(localStorage.getItem(\"notifications\"))\r\n      : [];\r\n    setPlayers(test_players);\r\n    setNotifications(test_notifications);\r\n  }, []);\r\n\r\n  const inputUpdate = (event) => {\r\n    if (event.nativeEvent.inputType === \"insertText\") {\r\n      setInputVal(inputVal + event.nativeEvent.data);\r\n    } else if (event.nativeEvent.inputType === \"deleteContentBackward\") {\r\n      setInputVal(inputVal.substr(0, inputVal.length - 1));\r\n    } else if (event.nativeEvent.inputType === \"insertFromPaste\") {\r\n      setInputVal(inputVal + event.nativeEvent.data);\r\n    }\r\n  };\r\n\r\n  const clearGame = () => {\r\n    localStorage.setItem('notifications', JSON.stringify([]))\r\n    localStorage.setItem('players', JSON.stringify([\r\n        {\r\n            key: 1,\r\n            name: \"Bank\",\r\n            money: 100000\r\n        },{\r\n            key: 2,\r\n            name: \"Free Parking\",\r\n            money: 0\r\n        }\r\n    ]))\r\n    window.location.reload(false)\r\n  };\r\n\r\n  const handleAdd = (player, money) => {\r\n    // handling player update\r\n    const new_player = {\r\n      key: players.length + 1,\r\n      name: player,\r\n      money: money,\r\n    };\r\n    const new_players = [...players, new_player];\r\n    setPlayers(new_players);\r\n    localStorage.setItem(\"players\", JSON.stringify(new_players));\r\n\r\n    // handling notification update\r\n    createNotification(`Added player ${player} with 💲${money}`);\r\n  };\r\n\r\n  const handleGo = (player, amount, reason) => {\r\n    // handle the money exchange\r\n    updateMoney(player, amount);\r\n\r\n    // handling notification update\r\n    createNotification(`Paying ${player.name} 💲${amount} for ${reason}`);\r\n  };\r\n\r\n  const handleTransfer = (player, other_info) => {\r\n    // handle transferring money from one player to another\r\n    const lucky_players = players.filter((player) =>\r\n      other_info.players.includes(player.key)\r\n    );\r\n\r\n    // extracts the names of the lucky players with some magic js\r\n    const lucky_player_names = lucky_players\r\n      .reduce((total, player) => total + \", \" + player.name, \"\")\r\n      .substr(2);\r\n\r\n    // handle the payment\r\n    const players_copy = JSON.parse(JSON.stringify(players));\r\n    lucky_players.forEach((lucky_player) => {\r\n      lucky_player.money += other_info.amount;\r\n      const playerIdx = players_copy.findIndex(\r\n        (obj) => obj.key === lucky_player.key\r\n      );\r\n      players_copy[playerIdx] = lucky_player;\r\n    });\r\n\r\n    player.money -= lucky_players.length * other_info.amount;\r\n    const playerIdx = players_copy.findIndex((obj) => obj.key === player.key);\r\n    players_copy[playerIdx] = player;\r\n\r\n    setPlayers(players_copy);\r\n    localStorage.setItem(\"players\", JSON.stringify(players_copy));\r\n\r\n    createNotification(\r\n      `${player.name} ➡️ ${lucky_player_names} 💲${other_info.amount} for ${other_info.reason}`\r\n    );\r\n  };\r\n\r\n  const updateMoney = (player, amount) => {\r\n    // handling player update\r\n    const new_player = {\r\n      ...player,\r\n      money: player.money + amount,\r\n    };\r\n    const players_copy = JSON.parse(JSON.stringify(players));\r\n    const playerIdx = players_copy.findIndex(\r\n      (obj) => obj.key === new_player.key\r\n    );\r\n    players_copy[playerIdx] = new_player;\r\n    setPlayers(players_copy);\r\n    localStorage.setItem(\"players\", JSON.stringify(players_copy));\r\n  };\r\n\r\n  const createNotification = (reason) => {\r\n\r\n    const notifications_copy = JSON.parse(JSON.stringify(notifications));\r\n    notifications_copy.unshift({ reason: reason, time: new Date() });\r\n    setNotifications(notifications_copy);\r\n    localStorage.setItem(\"notifications\", JSON.stringify(notifications_copy));\r\n\r\n  };\r\n\r\n  const nameToKey = (name) => {\r\n    let Candidates = players.filter((player) =>\r\n      player.name.toLowerCase().startsWith(name.toLowerCase())\r\n    );\r\n    if (Candidates.length === 0) {\r\n      createNotification(`could not find player matching ${name})`);\r\n      return -1;\r\n    }\r\n    if (Candidates.length >= 2) {\r\n      createNotification(`found multiple players matching ${name})`);\r\n      return -1;\r\n    }\r\n    let key = Candidates[0].key;\r\n    return key;\r\n  };\r\n\r\n  const nameToObj = (name) => {\r\n    let Candidates = players.filter((player) =>\r\n      player.name.toLowerCase().startsWith(name.toLowerCase())\r\n    );\r\n\r\n    if (Candidates.length === 0) {\r\n      throw `could not find player matching ${name}`;\r\n    }\r\n\r\n    if (Candidates.length >= 2) {\r\n        createNotification();\r\n      throw `found multiple players matching ${name}`;\r\n    }\r\n\r\n    let p = Candidates[0];\r\n    return p;\r\n  };\r\n\r\n  const handleInputEnter = (event) => {\r\n    let cmd = inputVal.trim();\r\n    let res = handleCommand(cmd);\r\n    if (res) {\r\n      setInputVal(\"\");\r\n    }\r\n  };\r\n\r\n  const handleCommand = (str) => {\r\n    //\"$$$ from p1 to p2,p3,p4 [for reason]\"\r\n    let trans1 = /^(\\d+)\\s+from\\s+(\\w+)\\s+to\\s+([\\w,]+)(\\s+for\\s+([\\w\\s]+))?$/i;\r\n    //\"$$$ to p1,p2,p3 from p4 [for reason]\"\r\n    let trans2 = /^(\\d+)\\s+to\\s+([\\w,]+)\\s+from\\s+(\\w+)(\\s+for\\s+([\\w\\s]+))?$/i;\r\n    //\"p1 pass\"\r\n    let pass = /^(\\w+)\\s+pass$/i;\r\n    //\"p1 land\"\r\n    let land = /^(\\w+)\\s+land$/i;\r\n    //\"p1 park\"\r\n    let park = /^(\\w+)\\s+park$/i;\r\n    // clear game\r\n    let clear = /clear game/i;\r\n\r\n    try {\r\n      if (trans1.test(str)) {\r\n\r\n        let match = trans1.exec(str);\r\n        let namesTo = match[3].split(\",\");\r\n        let playersTo = namesTo.map((name) => nameToKey(name));\r\n        let playerFrom = nameToObj(match[2]);\r\n        handleTransfer(playerFrom, {\r\n          amount: parseInt(match[1]),\r\n          players: playersTo,\r\n          reason: match[5] ?? \"reasons unknown\",\r\n        });\r\n\r\n      } else if (trans2.test(str)) {\r\n\r\n        let match = trans2.exec(str);\r\n        let namesTo = match[2].split(\",\");\r\n        let playersTo = namesTo.map((name) => nameToKey(name));\r\n        let playerFrom = nameToObj(match[3]);\r\n        handleTransfer(playerFrom, {\r\n          amount: parseInt(match[1]),\r\n          players: playersTo,\r\n          reason: match[5] ?? \"reasons unknown\",\r\n        });\r\n\r\n      } else if (pass.test(str)) {\r\n\r\n        let match = pass.exec(str);\r\n        let player = nameToObj(match[1]);\r\n        handleGo(player, 200, \"passing go\");\r\n\r\n      } else if (land.test(str)) {\r\n\r\n        let match = land.exec(str);\r\n        let player = nameToObj(match[1]);\r\n        handleGo(player, 400, \"landing on go\");\r\n\r\n      } else if (park.test(str)) {\r\n\r\n        let match = park.exec(str);\r\n        let player = nameToKey(match[1]);\r\n        let parkingCopy = nameToObj(\"free\");\r\n        handleTransfer(parkingCopy, {\r\n          amount: parkingCopy.money,\r\n          players: [player],\r\n          reason: \"free parking\",\r\n        });\r\n\r\n      } else if (clear.test(str)) {\r\n\r\n        clearGame();\r\n\r\n      } else {\r\n\r\n        throw \"could not understand \" + str;\r\n\r\n      }\r\n    } catch (e) {\r\n\r\n      createNotification(\"error:\" + e);\r\n      return false;\r\n\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Player\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      render: (text, record) => (\r\n        <div style={{ fontSize: \"18px\" }}>{record.name}</div>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Money\",\r\n      key: \"money\",\r\n      render: (text, record) => (\r\n        <div style={{ fontSize: \"18px\" }}>${record.money}</div>\r\n      ),\r\n      sorter: (a, b) => a.money - b.money,\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"action\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <GetMoney\r\n            type=\"transfer\"\r\n            onTransfer={(other_info) => handleTransfer(record, other_info)}\r\n            players={players}\r\n          />\r\n          <GetMoney\r\n            type=\"spend\"\r\n            onTransfer={(other_info) => handleTransfer(record, other_info)}\r\n            players={players}\r\n          />\r\n          <Button\r\n            type=\"secondary\"\r\n            block\r\n            onClick={() => handleGo(record, 200, \"passing go\")}\r\n          >\r\n            Pass Go\r\n          </Button>\r\n          <Button\r\n            type=\"secondary\"\r\n            block\r\n            onClick={() => handleGo(record, 400, \"landing on go\")}\r\n          >\r\n            On Go\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <AddPlayer onClear={clearGame} onAdd={handleAdd} />\r\n\r\n      <Table pagination={false} dataSource={players} columns={columns} />\r\n\r\n      <Input\r\n        placeholder=\"Scrubs use buttons\"\r\n        onChange={inputUpdate}\r\n        addonAfter={\r\n          <Popover content={clirules} title=\"The cli rules\">\r\n            <Button type=\"secondary\" onClick={null}>\r\n              Show Help\r\n            </Button>\r\n          </Popover>\r\n        }\r\n        size=\"large\"\r\n        value={inputVal}\r\n        onPressEnter={handleInputEnter}\r\n      />\r\n\r\n      <List\r\n        header={null}\r\n        footer={null}\r\n        bordered\r\n        dataSource={notifications.reverse()}\r\n        renderItem={(item) => (\r\n          <List.Item>\r\n            <Row style={{width: '100%'}}>\r\n              <Col span={18}>\r\n                {item.reason}\r\n              </Col>\r\n              <Col span={6}>\r\n                {Moment(item.time).fromNow()}\r\n              </Col>\r\n            </Row>\r\n          </List.Item>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Container;\r\n","C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\add_player.js",[],"C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\reportWebVitals.js",[],["45","46"],"C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\transfer_form.js",["47","48"],"import * as React from 'react'\r\nimport { Form, Select, InputNumber, Input, Button } from 'antd'\r\n  \r\nconst { Option } = Select\r\nconst formItemLayout = { labelCol: { span: 6 }, wrapperCol: { span: 14 } }\r\n  \r\n\r\nconst TransferForm = (props) => {\r\n    const onFinish = (values) => {\r\n        props.onSubmit(values)\r\n    }\r\n  \r\n    const not_transfer = props.type && props.type !== \"transfer\"\r\n\r\n    const initial_values = not_transfer ? {\r\n        ['players']: [1]\r\n    } : {\r\n        ['players']: []\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            name=\"validate_other\"\r\n            {...formItemLayout}\r\n            onFinish={onFinish}\r\n            initialValues={initial_values}\r\n        >\r\n\r\n            <Form.Item\r\n                name=\"players\"\r\n                label=\"Trasnfer To\"\r\n                rules={[{ required: true, type: 'array' }]}\r\n            >\r\n                <Select disabled={not_transfer} mode=\"multiple\" placeholder=\"Who is getting the money?\">\r\n                    {props.players ? props.players.map(\r\n                        (player) => <Option key={player.key} value={player.key}>{player.name}</Option>\r\n                    ) : <div />}\r\n                </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item \r\n                name=\"amount\" \r\n                label=\"Money\"\r\n                rules={[{ required: true }]}\r\n            >\r\n                <InputNumber style={{width: \"100%\"}} placeholder=\"How much money?\" min={0} max={5000} />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"reason\"\r\n                label=\"Reason\"\r\n                rules={[{ required: true }]}\r\n            >\r\n                <Input placeholder=\"Why are you transferring?\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default TransferForm","C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\transfer_money.js",[],["49","50"],"C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\player_form.js",[],"C:\\Users\\Imtiaz\\Documents\\programs\\javascript\\monopoly-money\\src\\App.js",[],["51","52"],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":172,"column":7,"nodeType":"59","messageId":"60","endLine":172,"endColumn":54},{"ruleId":"57","severity":1,"message":"58","line":177,"column":7,"nodeType":"59","messageId":"60","endLine":177,"endColumn":55},{"ruleId":"57","severity":1,"message":"58","line":260,"column":9,"nodeType":"59","messageId":"60","endLine":260,"endColumn":45},{"ruleId":"53","replacedBy":"61"},{"ruleId":"55","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":16,"column":9,"nodeType":"65","messageId":"66","endLine":16,"endColumn":25,"fix":"67"},{"ruleId":"63","severity":1,"message":"64","line":18,"column":9,"nodeType":"65","messageId":"66","endLine":18,"endColumn":24,"fix":"68"},{"ruleId":"53","replacedBy":"69"},{"ruleId":"55","replacedBy":"70"},{"ruleId":"53","replacedBy":"71"},{"ruleId":"55","replacedBy":"72"},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object",["73"],["74"],"no-useless-computed-key","Unnecessarily computed property ['players'] found.","Property","unnecessarilyComputedProperty",{"range":"75","text":"76"},{"range":"77","text":"76"},["73"],["74"],["73"],["74"],"no-global-assign","no-unsafe-negation",[445,456],"'players'",[482,493]]